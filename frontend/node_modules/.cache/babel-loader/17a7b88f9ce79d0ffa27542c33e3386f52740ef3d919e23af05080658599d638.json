{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Himal\\\\Documents\\\\GitHub\\\\WebAppSecurity\\\\frontend\\\\src\\\\Login.jsx\";\nimport React from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Login({\n  setToken\n}) {\n  const handleSubmit = async e => {\n    e.preventDefault();\n    const username = e.target.username.value;\n    const password = e.target.password.value;\n    try {\n      const response = await fetch('http://localhost:3333/login', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          username,\n          password\n        })\n      });\n      if (!response.ok) {\n        throw new Error(`Login failed: ${response.status} ${response.statusText}`);\n      }\n      const data = await response.json();\n\n      // Assuming the backend sends the token under a property named 'token'\n      setToken(data.token);\n    } catch (error) {\n      console.error('Login error:', error);\n      // Here you might want to show an error message to the user\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Login\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"username\",\n          children: \"Username: \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          id: \"username\",\n          name: \"username\",\n          type: \"text\",\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"password\",\n          children: \"Password: \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          id: \"password\",\n          name: \"password\",\n          type: \"password\",\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Login\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 9\n  }, this);\n}\n_c = Login;\nexport default Login;\nvar _c;\n$RefreshReg$(_c, \"Login\");","map":{"version":3,"names":["React","jsxDEV","_jsxDEV","Login","setToken","handleSubmit","e","preventDefault","username","target","value","password","response","fetch","method","headers","body","JSON","stringify","ok","Error","status","statusText","data","json","token","error","console","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","htmlFor","id","name","type","required","_c","$RefreshReg$"],"sources":["C:/Users/Himal/Documents/GitHub/WebAppSecurity/frontend/src/Login.jsx"],"sourcesContent":["import React from 'react';\r\n\r\nfunction Login({ setToken }) {\r\n    const handleSubmit = async (e) => {\r\n        e.preventDefault();\r\n\r\n        const username = e.target.username.value;\r\n        const password = e.target.password.value;\r\n\r\n        try {\r\n\t\t\tconst response = await fetch('http://localhost:3333/login', {\r\n\t\t\t\tmethod: 'POST',\r\n\t\t\t\theaders: {\r\n\t\t\t\t\t'Content-Type': 'application/json',\r\n\t\t\t\t},\r\n\t\t\t\tbody: JSON.stringify({ username, password }),\r\n\t\t\t});\r\n\t\t\t\r\n\r\n            if (!response.ok) {\r\n                throw new Error(`Login failed: ${response.status} ${response.statusText}`);\r\n            }\r\n\r\n            const data = await response.json();\r\n\r\n            // Assuming the backend sends the token under a property named 'token'\r\n            setToken(data.token);\r\n\r\n        } catch (error) {\r\n            console.error('Login error:', error);\r\n            // Here you might want to show an error message to the user\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <h1>Login</h1>\r\n            <form onSubmit={handleSubmit}>\r\n                <div>\r\n                    <label htmlFor='username'>Username: </label>\r\n                    <input id='username' name='username' type='text' required />\r\n                </div>\r\n                <div>\r\n                    <label htmlFor='password'>Password: </label>\r\n                    <input id='password' name='password' type='password' required />\r\n                </div>\r\n                <button type='submit'>Login</button>\r\n            </form>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Login;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}